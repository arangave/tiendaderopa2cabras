generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TipoFrase {
  SIN_FRASE
  RANDOM
  PERSONAL
  IA
}

model User {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  password          String
  firstName         String
  lastName1         String
  lastName2         String
  verified          Boolean  @default(false)
  createdAt         DateTime @default(now())
  verifyToken       String?  @unique
  verifyTokenExpiry DateTime?
  newsletter        Boolean  @default(false)
  resetToken        String?  @unique
  resetTokenExpiry  DateTime?

  pedidos           Pedido[]
}

model Subscriber {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model Categoria {
  id          Int        @id @default(autoincrement())
  nombre      String     @unique
  descripcion String?
  productos   Producto[]
}

model Producto {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float
  categoriaId Int
  categoria   Categoria          @relation(fields: [categoriaId], references: [id])

  tipoFrase   TipoFrase          @default(SIN_FRASE)
  tipo        String

  imagenes    Imagen[]
  colores     Color[]
  detalles    DetallePedido[]

  creadoEn    DateTime           @default(now())
  actualizadoEn DateTime         @updatedAt
}

model Imagen {
  id          Int       @id @default(autoincrement())
  url         String
  productoId  Int
  producto    Producto  @relation(fields: [productoId], references: [id])
}

model Color {
  id          Int       @id @default(autoincrement())
  nombre      String
  hex         String
  productoId  Int
  producto    Producto  @relation(fields: [productoId], references: [id])
  imagenUrl   String?   // Imagen asociada a ese color si quieres
}

model Pedido {
  id           Int             @id @default(autoincrement())
  usuarioId    Int
  usuario      User            @relation(fields: [usuarioId], references: [id])
  fecha        DateTime        @default(now())
  estado       String          // Ej: 'pendiente', 'pagado', 'enviado', etc.

  detalles     DetallePedido[]
}

model DetallePedido {
  id           Int             @id @default(autoincrement())
  pedidoId     Int
  pedido       Pedido          @relation(fields: [pedidoId], references: [id])

  productoId   Int
  producto     Producto        @relation(fields: [productoId], references: [id])

  cantidad     Int             @default(1)
  talla        String          // Ej: "M", "XL"
  color        String?         // Color escogido
  frase        String?         // Frase personalizada, puede ser vac√≠a si no tiene

  creadoEn     DateTime        @default(now())
}
